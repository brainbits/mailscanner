; transport configuration
transport.hostname = <your smtp host>

; mail report configuration
mail.from.name = MailScanner
mail.from.email = <from adress>
mail.recipients.0 = <first recipient adress>
mail.recipients.1 = <second recipient adress>
mail.subject = "MailScanner results"

; target imap host
imap.host = <imap host>
imap.user = <img user>
imap.password = <imap password>

; simple delete test
; will delete all mails that exceed the delete days treshold
module.delete_test_1.classname = MailScanner_Module_Delete
module.delete_test_1.enabled = 1
module.delete_test_1 = Delete test 1
module.delete_test_1.folder = INBOX/testfolder1
; set this to 1 to really delete
module.delete_test_1.action.delete = 0 
module.delete_test_2.tresholds.delete_days = 1
module.delete_test_2.tresholds.consider_days = 30
module.delete_test_1.match.all = 1

; simple delete test
; will delete all mails that match any of the given subject patterns
module.delete_test_2.classname = MailScanner_Module_Delete
module.delete_test_2.enabled = 1
module.delete_test_2.title = Delete test 2
module.delete_test_2.folder = INBOX/testfolder2
; set this to 1 to really delete
module.delete_test_2.action.delete = 0
; set this to 1 to really mark mails as seen
module.delete_test_2.action.mark_seen = 0
module.delete_test_2.tresholds.delete_days = 1
module.delete_test_2.tresholds.consider_days = 30
module.delete_test_2.match.subject.pattern.bogus1.regex = /bogus pattern 1/
module.delete_test_2.match.subject.pattern.bogus2.regex = /bogus pattern 2/

module.delete_test_3.classname = MailScanner_Module_Delete
module.delete_test_3.enabled = 1
module.delete_test_3.title = Delete test 3
module.delete_test_3.folder = INBOX/cron/koelnarena
; set this to 1 to really delete
module.delete_test_3.action.delete = 0
; set this to 1 to really mark mails as seen
module.delete_test_3.action.mark_seen = 0
; we want to delete all mails ...
module.delete_test_3.tresholds.delete_days = 1
module.delete_test_3.tresholds.consider_days = 30
; ... that match this pattern
module.delete_test_3.match.subject.pattern.unnecessary.regex = /completely unnecessary mail/

; analyzer test
; will delete all mails that exceed the delete days treshold
; will mark all processed mails seen
; will create a report based on the patterns
;
; a mysql backup tool creates mails with 2 different subjects, one for success, one for error
; examples:
; MySQL Backup Done for server1
; server2 MySQL Backup Error
;
; in this simple case the status is defined by the pattern
; the analyzer will report servers that are not configured yet
; the analyzer will report servers that are configured but have not been processed
; the analyzer will report any server that has an error status
module.analyze_test_1.classname = MailScanner_Module_Delete
module.analyze_test_1.enabled = 1
module.analyze_test_1.title = Mysql backup
module.analyze_test_1.folder = INBOX/backup/mysql
; set this to 1 to really delete
module.analyze_test_1.action.delete = 0
; set this to 1 to really mark mails as seen
module.analyze_test_1.action.mark_seen = 0
module.analyze_test_1.tresholds.consider_days = 1
module.analyze_test_1.tresholds.keep_days = 30
; only mails passing this pattern will be processed
; in this case the check status will be set based on the matching pattern status
module.analyze_test_1.match.subject.pattern.done.status = success
module.analyze_test_1.match.subject.pattern.done.regex = "/^MySQL Backup (?P<status>Done) for (?P<host>.*)$/"
module.analyze_test_1.match.subject.pattern.error.status = error
module.analyze_test_1.match.subject.pattern.error.regex = "/^(?P<host>.*) MySQL Backup (?P<status>Error)$/"
; configured which match wil be used for comparison with the expect-strings below (in this case, "host")
module.analyze_test_1.match.key = host
module.analyze_test_1.check.server1.expected = server1
module.analyze_test_1.check.server1.occurances = 1
module.analyze_test_1.check.server2.expected = server2
module.analyze_test_1.check.server2.occurances = 1

; analyzer test
; will delete all mails that exceed the delete days treshold
; will mark all processed mails seen
; will create a report based on the patterns
;
; a hoster backup tool creates mails with 3 different subjects, one for success, one for warning, one for error case
; examples:
; Host Europe Backup Status: server1 OK
: Host Europe Backup Status: server2 WARNING
; Host Europe Backup Status: server3 ERROR
;
; in this case the status for every matched pattern is success
; further conditions are checked and only in the ERROR case the check will be marked as an error
; the analyzer will report servers that are not configured yet
; the analyzer will report servers that are configured but have not been processed
; the analyzer will report any server that has an error status
module.analyze_test_2.classname = MailScanner_Module_Analyze
module.analyze_test_2.enabled = 1
module.analyze_test_2.title = Host Europe backup
module.analyze_test_2.folder = INBOX/backup/host europe
; set this to 1 to really delete
module.analyze_test_2.action.delete = 0
; set this to 1 to really mark mails as seen
module.analyze_test_2.action.mark_seen = 0
module.analyze_test_2.tresholds.consider_days = 1
module.analyze_test_2.tresholds.keep_days = 30
; only mails passing this pattern will be processed
; in this case the check will always have the status "success"
module.analyze_test_2.match.subject.pattern.0.status = success
module.analyze_test_2.match.subject.pattern.0.regex = "/^Host Europe Backup Status\: (?P<status>.*) \((?P<host>.*)\/.*$/"
; afterwards further conditions are checked
; in this case the found "status" match will be compared to "ERROR", if it matches, that status is set to "error"
module.analyze_test_2.match.subject.condition.status.status = error
module.analyze_test_2.match.subject.condition.status.string = ERROR
; configured which match wil be used for comparison with the expect-strings below (in this case, "host")
module.analyze_test_2.match.key = host
module.analyze_test_2.check.server1.expected = server1
module.analyze_test_2.check.server1.occurances = 1
module.analyze_test_2.check.server2.expected = server2
module.analyze_test_2.check.server2.occurances = 1
module.analyze_test_2.check.server3.expected = server3
module.analyze_test_2.check.server3.occurances = 1
